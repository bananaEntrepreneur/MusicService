import logging
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

API_TOKEN = '8162663853:AAHasVnLHU5bkyWVAHlWZxGXNy2uNn-O58w'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = psycopg2.connect(dbname="Music service", user="user1", password="12345678", host="localhost")
    cursor = conn.cursor()
    logging.info("Successfully connected to the database.")
except psycopg2.OperationalError as e:
    logging.error(f"Database connection error: {e}")
    conn = None
    cursor = None


# –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AuthStates(StatesGroup):
    waiting_for_username_login = State()
    waiting_for_password_login = State()
    waiting_for_email_reg = State()
    waiting_for_username_reg = State()
    waiting_for_password_reg = State()


class SearchStates(StatesGroup):
    waiting_for_track_query = State()
    waiting_for_album_query = State()
    waiting_for_artist_query = State()


# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="main_menu_search")],
        [types.InlineKeyboardButton(text="–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìö", callback_data="main_menu_library")],
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å ‚ûï", callback_data="main_menu_add")],
        [types.InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç üë§", callback_data="main_menu_account")]
    ])


def get_search_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤", callback_data="search_tracks_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–æ–≤", callback_data="search_albums_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="search_artists_opt")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])


# –•—ç–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def ensure_authenticated(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer()
        return None

    user_data = await state.get_data()
    if not user_data.get('user_id_db'):
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer(
            "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True)
        return None
    return user_data


@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply("üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å Bot!")
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–í—Ö–æ–¥)", callback_data="auth_login_start")],
        [types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register_start")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
        reply_markup=markup
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == 'auth_register_start')
async def process_register_start(callback_query: types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await callback_query.answer()
        return
    await callback_query.message.answer("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(AuthStates.waiting_for_email_reg)
    await callback_query.answer()


@dp.message(AuthStates.waiting_for_email_reg)
async def process_email_reg(message: types.Message, state: FSMContext):
    await state.update_data(reg_email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username:")
    await state.set_state(AuthStates.waiting_for_username_reg)


@dp.message(AuthStates.waiting_for_username_reg)
async def process_username_reg(message: types.Message, state: FSMContext):
    await state.update_data(reg_username=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞):")
    await state.set_state(AuthStates.waiting_for_password_reg)


@dp.message(AuthStates.waiting_for_password_reg)
async def process_password_reg(message: types.Message, state: FSMContext):
    if not conn or not cursor:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        await state.clear()
        return
    reg_password = message.text
    if len(reg_password) > 32:
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤:")
        return


    user_data_reg = await state.get_data()
    reg_email = user_data_reg.get('reg_email')
    reg_username = user_data_reg.get('reg_username')

    try:
        cursor.execute("SELECT id FROM \"user\" WHERE username = %s OR mail = %s", (reg_username, reg_email))
        if cursor.fetchone():
            await message.reply(
                "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ /login.")
            await state.clear()
            return

        cursor.execute(
            "INSERT INTO \"user\" (mail, username, password) VALUES (%s, %s, %s) RETURNING id, username",
            (reg_email, reg_username, reg_password)
        )
        new_user_db_id, new_user_db_username = cursor.fetchone()
        conn.commit()
        await message.reply(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, {new_user_db_username}!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /login –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


# –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
@dp.callback_query(lambda c: c.data == 'auth_login_start')
@dp.message(Command("login"))
async def process_login_start(event: types.Message | types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        msg_target = event.message if isinstance(event, types.CallbackQuery) else event
        await msg_target.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        if isinstance(event, types.CallbackQuery): await event.answer()
        return

    current_message = event.message if isinstance(event, types.CallbackQuery) else event
    await current_message.answer("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username:")
    await state.set_state(AuthStates.waiting_for_username_login)
    if isinstance(event, types.CallbackQuery):
        await event.answer()


@dp.message(AuthStates.waiting_for_username_login)
async def process_username_login(message: types.Message, state: FSMContext):
    await state.update_data(login_username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_for_password_login)


@dp.message(AuthStates.waiting_for_password_login)
async def process_password_login(message: types.Message, state: FSMContext):
    if not conn or not cursor:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è.")
        await state.clear()
        return

    user_data_login = await state.get_data()
    input_username = user_data_login.get('login_username')
    input_password = message.text

    try:
        cursor.execute(
            "SELECT id, username FROM \"user\" WHERE username = %s AND password = %s",
            (input_username, input_password)
        )
        db_user = cursor.fetchone()

        if db_user:
            user_id_db, username_db = db_user
            await state.update_data(user_id_db=user_id_db, username_db=username_db, authenticated=True)
            await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {username_db}!")
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /register.")
            await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# --- Main Menu Handlers ---
@dp.callback_query(lambda c: c.data == 'main_menu_back')
async def handle_main_menu_back(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    except Exception as e:
        logging.warning(f"Failed to edit message for main menu back: {e}")
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_search')
async def handle_menu_search(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_library')
async def handle_menu_library(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    library_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="library_my_playlists")],
        [types.InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏", callback_data="library_liked_tracks")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text("–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:", reply_markup=library_markup)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_add')
async def handle_menu_add(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    add_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="add_menu_track_cmd")],
        [types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="add_menu_playlist_cmd")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=add_markup)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_account')
async def handle_menu_account(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    username_db = user_auth_data.get('username_db', 'N/A')
    account_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ", callback_data="account_info_opt")],
        [types.InlineKeyboardButton(text="–í—ã–π—Ç–∏", callback_data="account_logout_opt")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text(f"–ê–∫–∫–∞—É–Ω—Ç: {username_db}", reply_markup=account_markup)
    await callback_query.answer()


# --- Search Sub-Menu and FSM Handlers ---
@dp.callback_query(lambda c: c.data == 'search_tracks_opt')
async def handle_search_tracks_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_track_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_track_query)
async def process_track_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.clear()
        return

    query = message.text
    try:
        cursor.execute(
            """SELECT t.id, t.name, al.title as album_name, au.name as author_name
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE t.name ILIKE %s
                   LIMIT 10""",
            (f'%{query}%',)
        )
        tracks = cursor.fetchall()
        if tracks:
            response_text = "üé∂ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n" + "\n".join(
                [f"ID: {tid}. {name} (–ê–ª—å–±–æ–º: {album if album else 'N/A'}, –ò—Å–ø: {author if author else 'N/A'})"
                 for tid, name, album, author in tracks]
            )
        else:
            response_text = "‚ùå –¢—Ä–µ–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤.")
    finally:
        await state.clear()
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_albums_opt')
async def handle_search_albums_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_album_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_album_query)
async def process_album_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.clear()
        return

    query = message.text
    try:
        cursor.execute(
            """SELECT al.id, al.title, au.name as author_name, g.name as genre_name
               FROM album al
                        LEFT JOIN author au ON al.author_id = au.id
                        LEFT JOIN genre g ON al.genre_id = g.id
               WHERE al.title ILIKE %s
                   LIMIT 10""",
            (f'%{query}%',)
        )
        albums = cursor.fetchall()
        if albums:
            response_text = "üíø –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã:\n" + "\n".join(
                [f"ID: {aid}. {title} (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author if author else 'N/A'}, –ñ–∞–Ω—Ä: {genre if genre else 'N/A'})"
                 for aid, title, author, genre in albums]
            )
        else:
            response_text = "‚ùå –ê–ª—å–±–æ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å–±–æ–º–æ–≤.")
    finally:
        await state.clear()
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_artists_opt')
async def handle_search_artists_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_artist_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_artist_query)
async def process_artist_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.clear()
        return

    query = message.text
    try:
        cursor.execute(
            """SELECT id, name, auditions, bio
               FROM author
               WHERE name ILIKE %s
                   LIMIT 10""",
        (f'%{query}%',)
        )
        artists = cursor.fetchall()
        if artists:
            response_text = "üé§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n" + "\n\n".join(
                [f"ID: {aid}. {name}\n–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions else 0}\nBIO: {bio if bio else 'N/A'}"
                 for aid, name, auditions, bio in artists]
            )
        else:
            response_text = "‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
    finally:
        await state.clear()
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


# --- Library Sub-menu Handlers ---
@dp.callback_query(lambda c: c.data == 'library_my_playlists')
async def handle_library_my_playlists(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await list_my_playlists(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'library_liked_tracks')
async def handle_library_liked_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("""
                       SELECT t.id, t.name, al.title as album_name, au.name as author_name
                       FROM track t
                                JOIN user_reaction ur ON t.id = ur.track_id
                                JOIN reactions r ON ur.reaction_id = r.id
                                LEFT JOIN album al ON t.album_id = al.id
                                LEFT JOIN author au ON al.author_id = au.id
                       WHERE ur.user_id = %s
                         AND r.type = 'like'
                       ORDER BY t.name LIMIT 20
                       """,
                       (user_id_db,))
        tracks = cursor.fetchall()
        if tracks:
            text = "üëç –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ (–¥–æ 20):\n" + "\n".join(
                [f"ID: {tid}. {name} (–ê–ª—å–±–æ–º: {album if album else 'N/A'}, –ò—Å–ø: {author if author else 'N/A'})" for
                 tid, name, album, author in tracks]
            )
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤.")
    await callback_query.answer()


# --- Add Sub-menu Handlers ---
@dp.callback_query(lambda c: c.data == 'add_menu_track_cmd')
async def handle_add_menu_track_cmd(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.answer(
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add_track <–Ω–∞–∑–≤–∞–Ω–∏–µ> <album_id> <playlist_id> <tag_id> [mp3_—Å—Å—ã–ª–∫–∞]`\n(IDs –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ).",
        parse_mode="MarkdownV2")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'add_menu_playlist_cmd')
async def handle_add_menu_playlist_cmd(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/create_playlist <–Ω–∞–∑–≤–∞–Ω–∏–µ>`",
                                        parse_mode="MarkdownV2")
    await callback_query.answer()


# --- Account Sub-menu Handlers ---
@dp.callback_query(lambda c: c.data == 'account_info_opt')
async def handle_account_info_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    username_db = user_auth_data.get('username_db', 'N/A')
    user_id_db = user_auth_data.get('user_id_db', 'N/A')
    email = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"
    try:
        cursor.execute("SELECT mail FROM \"user\" WHERE id = %s", (user_id_db,))
        email_row = cursor.fetchone()
        if email_row: email = email_row[0]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")

    await callback_query.message.answer(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\nUsername: {username_db}\nEmail: {email}\nID –≤ —Å–∏—Å—Ç–µ–º–µ: {user_id_db}")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'account_logout_opt')
async def handle_account_logout_opt(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    await callback_query.answer()
    await send_welcome(callback_query.message, state) # Optionally show start message


# --- Authenticated Commands ---
@dp.message(Command("logout"))
async def process_logout_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    await send_welcome(message, state)


@dp.message(Command("create_playlist"))
async def create_playlist_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return

    user_id_db = user_auth_data.get('user_id_db')
    args = message.get_args()
    if not args:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: /create_playlist <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    title = args

    try:
        cursor.execute(
            "INSERT INTO playlist (title, cover, user_id) VALUES (%s, %s, %s) RETURNING id",
            (title, '', user_id_db)
        )
        playlist_db_id = cursor.fetchone()[0]
        conn.commit()
        await message.reply(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{title}' (ID: {playlist_db_id}) —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")


@dp.message(Command("my_playlists"))
async def list_my_playlists(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return

    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("SELECT id, title FROM playlist WHERE user_id = %s ORDER BY title", (user_id_db,))
        rows = cursor.fetchall()
        if rows:
            text = "üìú –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:\n" + "\n".join([f"ID: {pid} - {title}" for pid, title in rows])
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /create_playlist <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        await message.reply(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")


@dp.message(Command("add_track"))
async def add_track_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return
    args = message.text.split(maxsplit=5)
    if len(args) < 5:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_track <–Ω–∞–∑–≤–∞–Ω–∏–µ> <album_id> <playlist_id> <tag_id> [mp3_—Å—Å—ã–ª–∫–∞]")
        return

    _, name, album_id_str, playlist_id_str, tag_id_str = args[:5]
    mp3_link = args[5] if len(args) > 5 else ''

    if not (album_id_str.isdigit() and playlist_id_str.isdigit() and tag_id_str.isdigit()):
        await message.reply("‚ùå ID –∞–ª—å–±–æ–º–∞, –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ —Ç–µ–≥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    album_id = int(album_id_str)
    playlist_id = int(playlist_id_str)
    tag_id = int(tag_id_str)

    try:
        cursor.execute("SELECT id FROM album WHERE id = %s", (album_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –ê–ª—å–±–æ–º —Å ID {album_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cursor.execute("SELECT id FROM playlist WHERE id = %s", (playlist_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç —Å ID {playlist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—Ä–µ–∫–∞).")
            return
        cursor.execute("SELECT id FROM tag WHERE id = %s", (tag_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –¢–µ–≥ —Å ID {tag_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—Ä–µ–∫–∞).")
            return

        cursor.execute(
            """INSERT INTO track ("name", auditions, mp3, playlist_id, tag_id, album_id)
               VALUES (%s, 0, %s, %s, %s, %s) RETURNING id""",
            (name, mp3_link, playlist_id, tag_id, album_id)
        )
        track_db_id = cursor.fetchone()[0]
        conn.commit()
        await message.reply(f"‚úÖ –¢—Ä–µ–∫ '{name}' (ID: {track_db_id}) –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞. {e}")


@dp.message(Command("add_track_to_playlist"))
async def add_track_to_playlist_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return

    user_id_db = user_auth_data.get('user_id_db')
    args = message.get_args().split()
    if len(args) != 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_track_to_playlist <playlist_id> <track_id>")
        return

    playlist_id_str, track_id_str = args
    if not (playlist_id_str.isdigit() and track_id_str.isdigit()):
        await message.reply("‚ùå ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    playlist_id = int(playlist_id_str)
    track_id = int(track_id_str)

    try:
        cursor.execute("SELECT id FROM playlist WHERE id = %s AND user_id = %s",
                       (playlist_id, user_id_db))
        if not cursor.fetchone():
            await message.reply("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return

        cursor.execute("SELECT id FROM track WHERE id = %s", (track_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –¢—Ä–µ–∫ —Å ID {track_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute(
            "INSERT INTO playlist_tracklist (playlist_id, track_id) VALUES (%s, %s)",
            (playlist_id, track_id)
        )
        conn.commit()
        await message.reply(f"‚úÖ –¢—Ä–µ–∫ (ID: {track_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç (ID: {playlist_id}).")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("like_track"))
async def like_track_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return

    user_id_db = user_auth_data.get('user_id_db')
    track_id_str = message.get_args()

    if not track_id_str or not track_id_str.isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /like_track <track_id>")
        return
    track_id = int(track_id_str)

    try:
        cursor.execute("SELECT id FROM track WHERE id = %s", (track_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –¢—Ä–µ–∫ —Å ID {track_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute("SELECT id FROM reactions WHERE type = 'like'")
        reaction_like_row = cursor.fetchone()
        if not reaction_like_row:
            await message.reply(
                "‚ùå –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ 'like' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        reaction_like_id = reaction_like_row[0]

        cursor.execute(
            """INSERT INTO user_reaction (user_id, reaction_id, track_id, playlist_id, album_id, author_id)
               VALUES (%s, %s, %s, NULL, NULL, NULL)""",
            (user_id_db, reaction_like_id, track_id)
        )
        conn.commit()
        await message.reply(f"‚ù§Ô∏è –¢—Ä–µ–∫ (ID: {track_id}) –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply("‚ÑπÔ∏è –í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥–æ–±–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except psycopg2.errors.ForeignKeyViolation as fk_error:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: {fk_error}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–∞–π–∫–Ω—É—Ç—å —Ç—Ä–µ–∫.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ —Ç—Ä–µ–∫–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("list_tracks"))
async def list_tracks_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        return
    try:
        cursor.execute("SELECT id, name, auditions FROM track ORDER BY name LIMIT 20")
        tracks = cursor.fetchall()
        if tracks:
            text = "üé∂ –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ (–¥–æ 20):\n" + "\n".join(
                [f"ID: {tid}. {name} (–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {aud}) " for tid, name, aud in tracks])
        else:
            text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤."
        await message.reply(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤.")


async def main():
    if not conn or not cursor:
        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return
    logging.info("Starting bot polling...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())