import logging
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, \
    StateFilter  # StateFilter might not be used directly if all states are handled by explicit state checks
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

API_TOKEN = '8162663853:AAHasVnLHU5bkyWVAHlWZxGXNy2uNn-O58w'  # Replace with your actual token

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = psycopg2.connect(dbname="Music service", user="user1", password="12345678", host="localhost")
    cursor = conn.cursor()
    logging.info("Successfully connected to the database.")
except psycopg2.OperationalError as e:
    logging.error(f"Database connection error: {e}")
    conn = None
    cursor = None


# –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AuthStates(StatesGroup):
    waiting_for_username_login = State()
    waiting_for_password_login = State()
    waiting_for_email_reg = State()
    waiting_for_username_reg = State()
    waiting_for_password_reg = State()


class SearchStates(StatesGroup):
    waiting_for_track_query = State()
    waiting_for_album_query = State()
    waiting_for_artist_query = State()


class PlaylistCreationStates(StatesGroup):
    waiting_for_playlist_title = State()
    adding_tracks = State()
    select_track_from_multiple = State()  # For clarifying track choice
    adding_tags = State()


# --- –ú–µ–Ω—é ---
def get_main_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="main_menu_search")],
        [types.InlineKeyboardButton(text="–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìö", callback_data="main_menu_library")],
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å ‚ûï", callback_data="main_menu_add")],
        [types.InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç üë§", callback_data="main_menu_account")],
        [types.InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üåü", callback_data="main_menu_recommendations")]
    ])


def get_search_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤", callback_data="search_tracks_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–æ–≤", callback_data="search_albums_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="search_artists_opt")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])


def get_recommendations_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üèÜ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤", callback_data="recomm_top_10_tracks")],
        [types.InlineKeyboardButton(text="üéß –î–ª—è –≤–∞—Å (–ø–æ —Ç–µ–≥–∞–º)", callback_data="recomm_user_tags")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])


# –•—ç–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def ensure_authenticated(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer()
        return None

    user_data = await state.get_data()
    if not user_data.get('user_id_db'):
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer(
            "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True)
        return None
    return user_data


@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    # Clear all states for the user to ensure a fresh start, but only if coming via /start
    # If user is already logged in and types /start, this will log them out.
    # Consider if this is desired behavior or if /start should check auth state first.
    await state.clear()  # Clears all FSM data for this user/chat including auth.
    await message.reply("üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å Bot!")
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–í—Ö–æ–¥)", callback_data="auth_login_start")],
        [types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register_start")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
        reply_markup=markup
    )


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.callback_query(lambda c: c.data == 'auth_register_start')
async def process_register_start(callback_query: types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await callback_query.answer()
        return
    await callback_query.message.answer("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(AuthStates.waiting_for_email_reg)
    await callback_query.answer()


@dp.message(AuthStates.waiting_for_email_reg)
async def process_email_reg(message: types.Message, state: FSMContext):
    await state.update_data(reg_email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username:")
    await state.set_state(AuthStates.waiting_for_username_reg)


@dp.message(AuthStates.waiting_for_username_reg)
async def process_username_reg(message: types.Message, state: FSMContext):
    await state.update_data(reg_username=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞):")
    await state.set_state(AuthStates.waiting_for_password_reg)


@dp.message(AuthStates.waiting_for_password_reg)
async def process_password_reg(message: types.Message, state: FSMContext):
    if not conn or not cursor:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        await state.set_state(None)  # Clear current FSM group state
        return
    reg_password = message.text
    if len(reg_password) > 32:
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤:")
        return  # Remain in current state

    user_data_reg = await state.get_data()
    reg_email = user_data_reg.get('reg_email')
    reg_username = user_data_reg.get('reg_username')

    try:
        cursor.execute("SELECT id FROM \"user\" WHERE username = %s OR mail = %s", (reg_username, reg_email))
        if cursor.fetchone():
            await message.reply(
                "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ /login.")
            await state.set_state(None)
            return

        cursor.execute(
            "INSERT INTO \"user\" (mail, username, password) VALUES (%s, %s, %s) RETURNING id, username",
            (reg_email, reg_username, reg_password)
        )
        new_user_db_id, new_user_db_username = cursor.fetchone()
        conn.commit()
        await message.reply(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, {new_user_db_username}!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /login –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.set_state(None)  # Clear current FSM group state


# --- –õ–æ–≥–∏–Ω ---
@dp.callback_query(lambda c: c.data == 'auth_login_start')
@dp.message(Command("login"))
async def process_login_start(event: types.Message | types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        msg_target = event.message if isinstance(event, types.CallbackQuery) else event
        await msg_target.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        if isinstance(event, types.CallbackQuery): await event.answer()
        return

    current_message = event.message if isinstance(event, types.CallbackQuery) else event
    await current_message.answer("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username:")
    await state.set_state(AuthStates.waiting_for_username_login)
    if isinstance(event, types.CallbackQuery):
        await event.answer()


@dp.message(AuthStates.waiting_for_username_login)
async def process_username_login(message: types.Message, state: FSMContext):
    await state.update_data(login_username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_for_password_login)


@dp.message(AuthStates.waiting_for_password_login)
async def process_password_login(message: types.Message, state: FSMContext):
    if not conn or not cursor:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è.")
        await state.set_state(None)  # Clear current FSM group state
        return

    user_data_login = await state.get_data()
    input_username = user_data_login.get('login_username')
    input_password = message.text

    try:
        cursor.execute(
            "SELECT id, username FROM \"user\" WHERE username = %s AND password = %s",
            (input_username, input_password)
        )
        db_user = cursor.fetchone()

        if db_user:
            user_id_db, username_db = db_user
            # Store auth data in FSM context (will persist until state.clear() or explicit removal)
            await state.update_data(user_id_db=user_id_db, username_db=username_db, authenticated=True)
            await state.set_state(None)  # Clear AuthStates group, but keep FSM data
            await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {username_db}!")
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /register.")
            # Don't clear all data, just the login attempt specific data if any, and clear the AuthStates
            await state.set_state(None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.callback_query(lambda c: c.data == 'main_menu_back')
async def handle_main_menu_back(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    except Exception as e:
        logging.warning(f"Failed to edit message for main menu back: {e}")
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_search')
async def handle_menu_search(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_library')
async def handle_menu_library(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    library_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="library_my_playlists")],
        [types.InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏", callback_data="library_liked_tracks")],
        [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç",
                                    callback_data="create_playlist_interactive_start")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text("–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:", reply_markup=library_markup)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_add')
async def handle_menu_add(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    add_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="add_menu_track_cmd")],
        [types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)",
                                    callback_data="create_playlist_interactive_start")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=add_markup)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_account')
async def handle_menu_account(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    username_db = user_auth_data.get('username_db', 'N/A')
    account_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ", callback_data="account_info_opt")],
        [types.InlineKeyboardButton(text="–í—ã–π—Ç–∏", callback_data="account_logout_opt")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])
    await callback_query.message.edit_text(f"–ê–∫–∫–∞—É–Ω—Ç: {username_db}", reply_markup=account_markup)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_recommendations')
async def handle_menu_recommendations(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=get_recommendations_menu_markup())
    await callback_query.answer()


# --- –ü–æ–∏—Å–∫: –ü–æ–¥–º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM ---
@dp.callback_query(lambda c: c.data == 'search_tracks_opt')
async def handle_search_tracks_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_track_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_track_query)
async def process_track_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    query = message.text
    try:
        cursor.execute(
            """SELECT t.id, t.name, al.title as album_name, au.name as author_name, al.author_id
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE t.name ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        tracks = cursor.fetchall()
        if tracks:
            await message.answer("üé∂ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:")
            for tid, name, album_name, author_name, author_id_val in tracks:
                track_text = f"ID: {tid}. {name}\n(–ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'})"
                buttons = [types.InlineKeyboardButton(text="üëç Like", callback_data=f"like_track_{tid}")]
                if author_id_val:
                    buttons.append(
                        types.InlineKeyboardButton(text="üë§ –ê–≤—Ç–æ—Ä", callback_data=f"view_author_{author_id_val}"))

                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(track_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –¢—Ä–µ–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤.")
    finally:
        await state.set_state(None)  # Clear only SearchStates
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_albums_opt')
async def handle_search_albums_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_album_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_album_query)
async def process_album_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return
    query = message.text
    try:
        cursor.execute(
            """SELECT al.id, al.title, au.name as author_name, g.name as genre_name, al.author_id
               FROM album al
                        LEFT JOIN author au ON al.author_id = au.id
                        LEFT JOIN genre g ON al.genre_id = g.id
               WHERE al.title ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        albums = cursor.fetchall()
        if albums:
            await message.answer("üíø –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã:")
            for aid, title, author_name, genre_name, author_id_val in albums:
                album_text = f"ID: {aid}. {title}\n(–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author_name if author_name else 'N/A'}, –ñ–∞–Ω—Ä: {genre_name if genre_name else 'N/A'})"
                buttons = [types.InlineKeyboardButton(text="üëç Like –ê–ª—å–±–æ–º", callback_data=f"like_album_{aid}")]
                if author_id_val:
                    buttons.append(
                        types.InlineKeyboardButton(text="üë§ –ö –∞–≤—Ç–æ—Ä—É", callback_data=f"view_author_{author_id_val}"))
                buttons.append(
                    types.InlineKeyboardButton(text="üéº –¢—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞", callback_data=f"list_tracks_for_album_{aid}"))
                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(album_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –ê–ª—å–±–æ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å–±–æ–º–æ–≤.")
    finally:
        await state.set_state(None)
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_artists_opt')
async def handle_search_artists_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_artist_query)
    await callback_query.answer()


@dp.message(SearchStates.waiting_for_artist_query)
async def process_artist_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return
    query = message.text
    try:
        cursor.execute(
            """SELECT id, name, auditions, bio
               FROM author
               WHERE name ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        artists = cursor.fetchall()
        if artists:
            await message.answer("üé§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:")
            for aid, name, auditions, bio in artists:
                artist_text = f"ID: {aid}. {name}\n–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions else 0}\nBIO: {bio if bio else 'N/A'}"
                buttons = [
                    types.InlineKeyboardButton(text="üëç Like –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"like_author_{aid}"),
                    types.InlineKeyboardButton(text="üõçÔ∏è –ú–µ—Ä—á", callback_data=f"view_merch_{aid}"),
                    types.InlineKeyboardButton(text="üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data=f"view_concerts_{aid}")
                ]
                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(artist_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
    finally:
        await state.set_state(None)
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


# --- Generic Like Handler & View Author Handler ---
@dp.callback_query(lambda c: c.data.startswith('like_'))
async def handle_like_entity(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')

    try:
        parts = callback_query.data.split('_')
        entity_type = parts[1]
        entity_id = int(parts[2])

        cursor.execute("SELECT id FROM reactions WHERE type = 'like'")
        reaction_like_row = cursor.fetchone()
        if not reaction_like_row:
            await callback_query.answer("‚ùå –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ 'like' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
            return
        reaction_like_id = reaction_like_row[0]

        sql_insert = """INSERT INTO user_reaction (user_id, reaction_id, track_id, album_id, author_id)
                        VALUES (%s, %s, %s, %s, %s)"""
        track_id_val, album_id_val, author_id_val = None, None, None

        if entity_type == 'track':
            track_id_val = entity_id
            cursor.execute("SELECT id FROM track WHERE id = %s", (entity_id,))
            if not cursor.fetchone():
                await callback_query.answer(f"–¢—Ä–µ–∫ ID {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
        elif entity_type == 'album':
            album_id_val = entity_id
            cursor.execute("SELECT id FROM album WHERE id = %s", (entity_id,))
            if not cursor.fetchone():
                await callback_query.answer(f"–ê–ª—å–±–æ–º ID {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
        elif entity_type == 'author':
            author_id_val = entity_id
            cursor.execute("SELECT id FROM author WHERE id = %s", (entity_id,))
            if not cursor.fetchone():
                await callback_query.answer(f"–ê–≤—Ç–æ—Ä ID {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
        else:
            await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –ª–∞–π–∫–∞.", show_alert=True)
            return

        cursor.execute(sql_insert, (user_id_db, reaction_like_id, track_id_val, album_id_val, author_id_val))
        conn.commit()
        await callback_query.answer(f"{entity_type.capitalize()} ID {entity_id} –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!", show_alert=False)

    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await callback_query.answer("–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ.", show_alert=True)
    except psycopg2.errors.ForeignKeyViolation as fk_error:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: {fk_error}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–∞–π–∫–Ω—É—Ç—å.", show_alert=True)
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith('view_author_'))
async def handle_view_author(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    try:
        author_id = int(callback_query.data.split('_')[-1])  # Allow for view_author_fromalbum_ID etc.
        cursor.execute("SELECT id, name, auditions, bio FROM author WHERE id = %s", (author_id,))
        author_data = cursor.fetchone()

        if author_data:
            aid, name, auditions, bio = author_data
            text = f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\nID: {aid}\n–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions else 0}\nBIO: {bio if bio else 'N/A'}"

            author_actions_markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üëç Like –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"like_author_{aid}"),
                    types.InlineKeyboardButton(text="üõçÔ∏è –ú–µ—Ä—á", callback_data=f"view_merch_{aid}"),
                ],
                [types.InlineKeyboardButton(text="üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data=f"view_concerts_{aid}")]
            ])
            await callback_query.message.answer(text, reply_markup=author_actions_markup)
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–≤—Ç–æ—Ä–∞: {e}")
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ.")
    await callback_query.answer()


# Placeholder handlers
@dp.callback_query(lambda c: c.data.startswith('list_tracks_for_album_'))
async def handle_list_tracks_for_album(callback_query: types.CallbackQuery, state: FSMContext):
    album_id = callback_query.data.split('_')[-1]
    await callback_query.message.answer(f"–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç—Ä–µ–∫–∏ –¥–ª—è –∞–ª—å–±–æ–º–∞ ID {album_id}. (–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith('view_merch_'))
async def handle_view_merch(callback_query: types.CallbackQuery, state: FSMContext):
    author_id = callback_query.data.split('_')[-1]
    await callback_query.message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ—Ä—á –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ID {author_id}. (–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith('view_concerts_'))
async def handle_view_concerts(callback_query: types.CallbackQuery, state: FSMContext):
    author_id = callback_query.data.split('_')[-1]
    await callback_query.message.answer(f"–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–Ω—Ü–µ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ID {author_id}. (–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞" ---
@dp.callback_query(lambda c: c.data == 'library_my_playlists')
async def handle_library_my_playlists(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await list_my_playlists(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'library_liked_tracks')
async def handle_library_liked_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("""
                       SELECT t.id, t.name, al.title as album_name, au.name as author_name
                       FROM track t
                                JOIN user_reaction ur ON t.id = ur.track_id
                                JOIN reactions r ON ur.reaction_id = r.id
                                LEFT JOIN album al ON t.album_id = al.id
                                LEFT JOIN author au ON al.author_id = au.id
                       WHERE ur.user_id = %s
                         AND r.type = 'like'
                         AND ur.track_id IS NOT NULL
                       ORDER BY t.name LIMIT 20
                       """, (user_id_db,))
        tracks = cursor.fetchall()
        if tracks:
            text = "üëç –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ (–¥–æ 20):\n" + "\n".join(
                [f"ID: {tid}. {name} (–ê–ª—å–±–æ–º: {album if album else 'N/A'}, –ò—Å–ø: {author if author else 'N/A'})" for
                 tid, name, album, author in tracks]
            )
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤.")
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é "–î–æ–±–∞–≤–∏—Ç—å" ---
@dp.callback_query(lambda c: c.data == 'add_menu_track_cmd')
async def handle_add_menu_track_cmd(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    await callback_query.message.answer(
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add_track <–Ω–∞–∑–≤–∞–Ω–∏–µ> <album_id> <playlist_id> <tag_id> [mp3_—Å—Å—ã–ª–∫–∞]`\n(IDs –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ).",
        parse_mode="MarkdownV2")
    await callback_query.answer()


# Updated to start interactive playlist creation
@dp.callback_query(lambda c: c.data == 'create_playlist_interactive_start')
async def handle_create_playlist_interactive_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:  # Edit previous message if possible
        await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    except:  # Send new if edit fails
        await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    await state.set_state(PlaylistCreationStates.waiting_for_playlist_title)
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é "–ê–∫–∫–∞—É–Ω—Ç" ---
@dp.callback_query(lambda c: c.data == 'account_info_opt')
async def handle_account_info_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    username_db = user_auth_data.get('username_db', 'N/A')
    user_id_db = user_auth_data.get('user_id_db', 'N/A')
    email = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"
    try:
        cursor.execute("SELECT mail FROM \"user\" WHERE id = %s", (user_id_db,))
        email_row = cursor.fetchone()
        if email_row: email = email_row[0]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")

    await callback_query.message.answer(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\nUsername: {username_db}\nEmail: {email}\nID –≤ —Å–∏—Å—Ç–µ–º–µ: {user_id_db}")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'account_logout_opt')
async def handle_account_logout_opt(callback_query: types.CallbackQuery, state: FSMContext):
    # Clear all FSM data for this user, effectively logging them out
    await state.clear()
    try:
        await callback_query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    except:
        await callback_query.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    await callback_query.answer()
    # Optionally, send the initial /start message again to prompt for login/register
    # await send_welcome(callback_query.message, state)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" ---
@dp.callback_query(lambda c: c.data == 'recomm_top_10_tracks')
async def handle_recomm_top_10_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        cursor.execute(
            """SELECT t.id, t.name, t.auditions, al.title as album_name, au.name as author_name
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               ORDER BY t.auditions DESC NULLS LAST LIMIT 10"""
        )
        tracks = cursor.fetchall()
        if tracks:
            response_text = "üèÜ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –ø–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è–º:\n\n"
            for tid, name, auditions, album_name, author_name in tracks:
                response_text += (
                    f"üéµ {name} (ID: {tid})\n"
                    f"   –ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'}\n"
                    f"   –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions is not None else 0}\n\n"
                )
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤.")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'recomm_user_tags')
async def handle_recomm_user_tags(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')

    try:
        cursor.execute(
            """SELECT DISTINCT tt.tag_id
               FROM user_reaction ur
                        JOIN reactions react ON ur.reaction_id = react.id
                        JOIN track t ON ur.track_id = t.id
                        JOIN track_tag tt ON t.id = tt.track_id
               WHERE ur.user_id = %s
                 AND react.type = 'like'
                 AND ur.track_id IS NOT NULL""",
            (user_id_db,)
        )
        liked_tags_rows = cursor.fetchall()
        if not liked_tags_rows:
            await callback_query.message.answer(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ª–∞–π–∫–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤!")
            await callback_query.answer()
            return

        liked_tag_ids = [row[0] for row in liked_tags_rows]

        cursor.execute(
            """SELECT t.id,
                      t.name,
                      COUNT(DISTINCT tt.tag_id) as matching_tags,
                      t.auditions,
                      al.title                  as album_name,
                      au.name                   as author_name
               FROM track t
                        JOIN track_tag tt ON t.id = tt.track_id
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE tt.tag_id = ANY (%s)
                 AND t.id NOT IN (SELECT ur_liked.track_id
                                  FROM user_reaction ur_liked
                                           JOIN reactions react_liked ON ur_liked.reaction_id = react_liked.id
                                  WHERE ur_liked.user_id = %s
                                    AND react_liked.type = 'like'
                                    AND ur_liked.track_id IS NOT NULL)
               GROUP BY t.id, t.name, t.auditions, al.title, au.name
               ORDER BY matching_tags DESC, t.auditions DESC NULLS LAST LIMIT 5""",
            (liked_tag_ids, user_id_db)
        )
        recommended_tracks = cursor.fetchall()

        if recommended_tracks:
            response_text = "üéß –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–ø–æ —Ç–µ–≥–∞–º):\n\n"
            for tid, name, matching_tags, auditions, album_name, author_name in recommended_tracks:
                response_text += (
                    f"üéµ {name} (ID: {tid})\n"
                    f"   –ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'}\n"
                    f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤: {matching_tags}, –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions is not None else 0}\n\n"
                )
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    await callback_query.answer()


# --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ ---
@dp.message(PlaylistCreationStates.waiting_for_playlist_title)
async def process_playlist_title(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    playlist_title = message.text.strip()
    if not playlist_title:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return  # Remain in current state

    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute(
            "INSERT INTO playlist (title, user_id, cover) VALUES (%s, %s, %s) RETURNING id",
            (playlist_title, user_id_db, '')  # cover can be empty for now
        )
        new_playlist_id = cursor.fetchone()[0]
        conn.commit()
        await state.update_data(new_playlist_id=new_playlist_id, playlist_title=playlist_title)
        await message.answer(
            f"–ü–ª–µ–π–ª–∏—Å—Ç '{playlist_title}' (ID: {new_playlist_id}) —Å–æ–∑–¥–∞–Ω.\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ /done_tracks."
        )
        await state.set_state(PlaylistCreationStates.adding_tracks)
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ (DB): {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)


@dp.message(Command("done_tracks"), PlaylistCreationStates.adding_tracks)
async def process_done_adding_tracks(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    playlist_data = await state.get_data()
    playlist_title = playlist_data.get('playlist_title', '–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç')

    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_title}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ /done_tags."
    )
    await state.set_state(PlaylistCreationStates.adding_tags)


@dp.message(PlaylistCreationStates.adding_tracks)
async def process_add_track_to_new_playlist(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    playlist_data = await state.get_data()
    new_playlist_id = playlist_data.get('new_playlist_id')
    if not new_playlist_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(None)
        return

    track_input = message.text.strip()
    found_track_id = None
    found_track_name = None

    try:
        if track_input.isdigit():  # User provided an ID
            track_id_candidate = int(track_input)
            cursor.execute("SELECT id, name FROM track WHERE id = %s", (track_id_candidate,))
            track_record = cursor.fetchone()
            if track_record:
                found_track_id, found_track_name = track_record
            else:
                await message.reply(f"–¢—Ä–µ–∫ —Å ID {track_id_candidate} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return
        else:  # User provided a name
            cursor.execute(
                "SELECT id, name FROM track WHERE name ILIKE %s",
                (f'%{track_input}%',)
            )
            tracks_found = cursor.fetchall()
            if not tracks_found:
                await message.reply(f"–¢—Ä–µ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{track_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID.")
                return
            if len(tracks_found) == 1:
                found_track_id, found_track_name = tracks_found[0]
            else:
                # Multiple tracks found, ask user to specify
                response_text = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ ID:\n"
                options = []
                for tid, tname in tracks_found[:5]:  # Limit options displayed
                    response_text += f"ID: {tid} - {tname}\n"
                    options.append({'id': tid, 'name': tname})
                await state.update_data(track_selection_options=options)  # Store options for next step
                # For simplicity here, just ask to re-enter ID from the list. A button based selection would be better.
                await message.reply(response_text + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.")
                # A more robust FSM would go to a new state like PlaylistCreationStates.select_track_from_multiple
                # For now, user has to re-enter the ID in the current adding_tracks state.
                return

        if found_track_id and found_track_name:
            cursor.execute(
                "INSERT INTO playlist_tracklist (playlist_id, track_id) VALUES (%s, %s)",
                (new_playlist_id, found_track_id)
            )
            conn.commit()
            await message.reply(f"–¢—Ä–µ–∫ '{found_track_name}' (ID: {found_track_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç. "
                                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ /done_tracks.")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply(f"–¢—Ä–µ–∫ '{found_track_name}' —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /done_tracks.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.")


@dp.message(Command("done_tags"), PlaylistCreationStates.adding_tags)
async def process_done_adding_tags(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    playlist_data = await state.get_data()
    playlist_title = playlist_data.get('playlist_title', '–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç')
    new_playlist_id = playlist_data.get('new_playlist_id')

    await message.answer(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_title}' (ID: {new_playlist_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    await state.set_state(None)  # Clear PlaylistCreationStates
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())


@dp.message(PlaylistCreationStates.adding_tags)
async def process_add_tag_to_new_playlist(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    playlist_data = await state.get_data()
    new_playlist_id = playlist_data.get('new_playlist_id')
    if not new_playlist_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(None)
        return

    tag_name_input = message.text.strip()
    if not tag_name_input:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ /done_tags.")
        return

    try:
        # Check if tag exists, otherwise create it
        cursor.execute("SELECT id FROM tag WHERE name ILIKE %s", (tag_name_input,))
        tag_record = cursor.fetchone()
        if tag_record:
            tag_id = tag_record[0]
            tag_name = tag_name_input  # Or fetch exact name if case differs and desired
        else:
            cursor.execute("INSERT INTO tag (name) VALUES (%s) RETURNING id, name", (tag_name_input,))
            tag_id, tag_name = cursor.fetchone()
            conn.commit()
            await message.reply(f"–¢–µ–≥ '{tag_name}' —Å–æ–∑–¥–∞–Ω.")

        # Add tag to playlist
        cursor.execute(
            "INSERT INTO playlist_tags (playlist_id, tag_id) VALUES (%s, %s)",
            (new_playlist_id, tag_id)
        )
        conn.commit()
        await message.reply(f"–¢–µ–≥ '{tag_name}' (ID: {tag_id}) –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É. "
                            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ /done_tags.")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply(f"–¢–µ–≥ '{tag_name_input}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç—Ç–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /done_tags.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞.")


# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã) ---
@dp.message(Command("logout"))
async def process_logout_cmd(message: types.Message, state: FSMContext):
    await state.clear()  # Clear all FSM data for this user/chat
    await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    # After logout, show initial welcome to allow login/register again
    await send_welcome(message, state)  # Pass state for consistency, though it's just cleared


@dp.message(Command("create_playlist"))  # Simple one-shot command, interactive is preferred via menu
async def create_playlist_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    args = message.get_args()
    if not args:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: /create_playlist <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å' / '–ú–æ—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'.")
        return
    title = args
    try:
        cursor.execute(
            "INSERT INTO playlist (title, cover, user_id) VALUES (%s, %s, %s) RETURNING id",
            (title, '', user_id_db)
        )
        playlist_db_id = cursor.fetchone()[0]
        conn.commit()
        await message.reply(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{title}' (ID: {playlist_db_id}) —Å–æ–∑–¥–∞–Ω (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º).")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")


@dp.message(Command("my_playlists"))
async def list_my_playlists(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("SELECT id, title FROM playlist WHERE user_id = %s ORDER BY title", (user_id_db,))
        rows = cursor.fetchall()
        if rows:
            text = "üìú –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:\n" + "\n".join([f"ID: {pid} - {title}" for pid, title in rows])
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤."
        await message.reply(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")


@dp.message(Command("add_track"))
async def add_track_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    args = message.text.split(maxsplit=5)
    if len(args) < 5:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_track <–Ω–∞–∑–≤–∞–Ω–∏–µ> <album_id> <playlist_id> <tag_id> [mp3_—Å—Å—ã–ª–∫–∞]")
        return
    _, name, album_id_str, playlist_id_str, tag_id_str = args[:5]
    mp3_link = args[5] if len(args) > 5 else ''
    if not (album_id_str.isdigit() and playlist_id_str.isdigit() and tag_id_str.isdigit()):
        await message.reply("‚ùå ID –∞–ª—å–±–æ–º–∞, –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ —Ç–µ–≥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    album_id, playlist_id, tag_id = int(album_id_str), int(playlist_id_str), int(tag_id_str)
    try:
        for table, entity_id_val in [("album", album_id), ("playlist", playlist_id), ("tag", tag_id)]:
            cursor.execute(f"SELECT id FROM \"{table}\" WHERE id = %s", (entity_id_val,))
            if not cursor.fetchone():
                await message.reply(f"‚ùå –°—É—â–Ω–æ—Å—Ç—å {table} —Å ID {entity_id_val} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
        cursor.execute(
            """INSERT INTO track ("name", auditions, mp3, playlist_id, tag_id, album_id)
               VALUES (%s, 0, %s, %s, %s, %s) RETURNING id""",
            (name, mp3_link, playlist_id, tag_id, album_id)
        )
        track_db_id = cursor.fetchone()[0]
        conn.commit()
        await message.reply(f"‚úÖ –¢—Ä–µ–∫ '{name}' (ID: {track_db_id}) –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")


@dp.message(Command("add_track_to_playlist"))
async def add_track_to_playlist_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    args = message.get_args().split()
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_track_to_playlist <playlist_id> <track_id>")
        return
    playlist_id, track_id = int(args[0]), int(args[1])
    try:
        cursor.execute("SELECT id FROM playlist WHERE id = %s AND user_id = %s", (playlist_id, user_id_db))
        if not cursor.fetchone():
            await message.reply("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return
        cursor.execute("SELECT id FROM track WHERE id = %s", (track_id,))
        if not cursor.fetchone():
            await message.reply(f"‚ùå –¢—Ä–µ–∫ —Å ID {track_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cursor.execute("INSERT INTO playlist_tracklist (playlist_id, track_id) VALUES (%s, %s)",
                       (playlist_id, track_id))
        conn.commit()
        await message.reply(f"‚úÖ –¢—Ä–µ–∫ (ID: {track_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç (ID: {playlist_id}).")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("like_track"))
async def like_track_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    user_id_db = user_auth_data.get('user_id_db')
    track_id_str = message.get_args()
    if not track_id_str or not track_id_str.isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /like_track <track_id>. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ üëç.")
        return
    track_id = int(track_id_str)
    try:
        cursor.execute("SELECT id FROM reactions WHERE type = 'like'")
        reaction_like_id = cursor.fetchone()[0]  # Assumes 'like' reaction exists
        cursor.execute("INSERT INTO user_reaction (user_id, reaction_id, track_id) VALUES (%s, %s, %s)",
                       (user_id_db, reaction_like_id, track_id))
        conn.commit()
        await message.reply(f"‚ù§Ô∏è –¢—Ä–µ–∫ (ID: {track_id}) –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)!")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply("‚ÑπÔ∏è –í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫.")
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ —Ç—Ä–µ–∫–∞.")


@dp.message(Command("list_tracks"))
async def list_tracks_cmd(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return
    try:
        cursor.execute("SELECT id, name, auditions FROM track ORDER BY name LIMIT 20")
        tracks = cursor.fetchall()
        if tracks:
            text = "üé∂ –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ (–¥–æ 20):\n" + "\n".join(
                [f"ID: {tid}. {name} (–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {aud if aud is not None else 0}) " for tid, name, aud in tracks])
        else:
            text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤."
        await message.reply(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    if not conn or not cursor:
        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return
    logging.info("Starting bot polling...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())