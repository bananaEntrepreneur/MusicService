import logging
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

API_TOKEN = '...'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = psycopg2.connect(dbname="Music service", user="...", password="...", host="localhost")
    cursor = conn.cursor()
    logging.info("Successfully connected to the database.")
except psycopg2.OperationalError as e:
    logging.error(f"Database connection error: {e}")
    conn = None
    cursor = None


# –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AuthStates(StatesGroup):
    waiting_for_username_login = State()
    waiting_for_password_login = State()
    waiting_for_email_reg = State()
    waiting_for_username_reg = State()
    waiting_for_password_reg = State()


class SearchStates(StatesGroup):
    waiting_for_track_query = State()
    waiting_for_album_query = State()
    waiting_for_artist_query = State()


class PlaylistCreationStates(StatesGroup):
    waiting_for_playlist_title = State()
    adding_tracks = State()
    select_track_from_multiple = State()
    adding_tags = State()


class PlaylistManagementStates(StatesGroup):
    waiting_for_track_to_add_to_existing_playlist = State()


# --- –ú–µ–Ω—é ---
def get_main_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="main_menu_search")],
        [types.InlineKeyboardButton(text="–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìö", callback_data="main_menu_library")],
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å ‚ûï", callback_data="main_menu_add")],
        [types.InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç üë§", callback_data="main_menu_account")],
        [types.InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üåü", callback_data="main_menu_recommendations")]
    ])


def get_search_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤", callback_data="search_tracks_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–æ–≤", callback_data="search_albums_opt")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="search_artists_opt")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])


def get_recommendations_menu_markup():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üèÜ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤", callback_data="recomm_top_10_tracks")],
        [types.InlineKeyboardButton(text="üéß –î–ª—è –≤–∞—Å", callback_data="recomm_user_tags")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
    ])


# –•—ç–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
async def send_error_message(event: types.Message | types.CallbackQuery,
                             message_text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."):
    msg_target = event.message if isinstance(event, types.CallbackQuery) else event
    try:
        await msg_target.reply(message_text)
    except Exception as e_reply:
        logging.warning(f"Failed to reply with error, attempting to send: {e_reply}")
        try:
            await bot.send_message(msg_target.chat.id, message_text)
        except Exception as e_send:
            logging.error(f"Failed to send error message directly: {e_send}")

    if isinstance(event, types.CallbackQuery):
        try:
            await event.answer(message_text.split('.')[0], show_alert=True)
        except Exception as e_answer:  # CQ might have expired
            logging.warning(f"Failed to answer callback query for error: {e_answer}")


# –•—ç–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def ensure_authenticated(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext):
    if not conn or not cursor:
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer("DB Connection Error",
                                                                                      show_alert=True)
        return None

    user_data = await state.get_data()
    if not user_data.get('user_id_db'):
        msg_target = message_or_cq.message if isinstance(message_or_cq, types.CallbackQuery) else message_or_cq
        await msg_target.reply("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
        if isinstance(message_or_cq, types.CallbackQuery): await message_or_cq.answer(
            "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True)
        return None
    return user_data


@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        await message.reply("üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å Bot!")
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–í—Ö–æ–¥)", callback_data="auth_login_start")],
            [types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register_start")]
        ])
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"Error in send_welcome: {e}")
        await send_error_message(message)


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.callback_query(lambda c: c.data == 'auth_register_start')
async def process_register_start(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        if not conn or not cursor:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            await callback_query.answer()
            return
        await callback_query.message.answer("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(AuthStates.waiting_for_email_reg)
        await callback_query.answer()
    except Exception as e:
        logging.error(f"Error in process_register_start: {e}")
        await send_error_message(callback_query)


@dp.message(AuthStates.waiting_for_email_reg)
async def process_email_reg(message: types.Message, state: FSMContext):
    try:
        await state.update_data(reg_email=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username:")
        await state.set_state(AuthStates.waiting_for_username_reg)
    except Exception as e:
        logging.error(f"Error in process_email_reg: {e}")
        await send_error_message(message)
        await state.clear()


@dp.message(AuthStates.waiting_for_username_reg)
async def process_username_reg(message: types.Message, state: FSMContext):
    try:
        await state.update_data(reg_username=message.text)
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞):")
        await state.set_state(AuthStates.waiting_for_password_reg)
    except Exception as e:
        logging.error(f"Error in process_username_reg: {e}")
        await send_error_message(message)
        await state.clear()


@dp.message(AuthStates.waiting_for_password_reg)
async def process_password_reg(message: types.Message, state: FSMContext):
    try:
        if not conn or not cursor:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            await state.set_state(None)
            return
        reg_password = message.text
        if len(reg_password) > 32:
            await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤:")
            return

        user_data_reg = await state.get_data()
        reg_email = user_data_reg.get('reg_email')
        reg_username = user_data_reg.get('reg_username')

        cursor.execute("SELECT id FROM \"user\" WHERE username = %s OR mail = %s", (reg_username, reg_email))
        if cursor.fetchone():
            await message.reply(
                "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ /login.")
            await state.set_state(None)
            return

        cursor.execute(
            "INSERT INTO \"user\" (mail, username, password) VALUES (%s, %s, %s) RETURNING id, username",
            (reg_email, reg_username, reg_password)
        )
        new_user_db_id, new_user_db_username = cursor.fetchone()
        conn.commit()
        await message.reply(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, {new_user_db_username}!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /login –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.")
    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"Database error in process_password_reg: {db_err}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        conn.rollback()
        logging.error(f"Unexpected error in process_password_reg: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.set_state(None)


# --- –õ–æ–≥–∏–Ω ---
@dp.callback_query(lambda c: c.data == 'auth_login_start')
@dp.message(Command("login"))
async def process_login_start(event: types.Message | types.CallbackQuery, state: FSMContext):
    try:
        if not conn or not cursor:
            msg_target = event.message if isinstance(event, types.CallbackQuery) else event
            await msg_target.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            if isinstance(event, types.CallbackQuery): await event.answer()
            return

        current_message = event.message if isinstance(event, types.CallbackQuery) else event
        await current_message.answer("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username:")
        await state.set_state(AuthStates.waiting_for_username_login)
        if isinstance(event, types.CallbackQuery):
            await event.answer()
    except Exception as e:
        logging.error(f"Error in process_login_start: {e}")
        await send_error_message(event)
        await state.clear()


@dp.message(AuthStates.waiting_for_username_login)
async def process_username_login(message: types.Message, state: FSMContext):
    try:
        await state.update_data(login_username=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.waiting_for_password_login)
    except Exception as e:
        logging.error(f"Error in process_username_login: {e}")
        await send_error_message(message)
        await state.clear()


@dp.message(AuthStates.waiting_for_password_login)
async def process_password_login(message: types.Message, state: FSMContext):
    try:
        if not conn or not cursor:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è.")
            await state.set_state(None)
            return

        user_data_login = await state.get_data()
        input_username = user_data_login.get('login_username')
        input_password = message.text

        cursor.execute(
            "SELECT id, username FROM \"user\" WHERE username = %s AND password = %s",
            (input_username, input_password)
        )
        db_user = cursor.fetchone()

        if db_user:
            user_id_db, username_db = db_user
            await state.update_data(user_id_db=user_id_db, username_db=username_db, authenticated=True)
            await state.set_state(None)
            await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {username_db}!")
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /register.")
            await state.set_state(None)
    except psycopg2.Error as db_err:
        logging.error(f"Database error in process_password_login: {db_err}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)
    except Exception as e:
        logging.error(f"Unexpected error in process_password_login: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.callback_query(lambda c: c.data == 'main_menu_back')
async def handle_main_menu_back(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    except Exception as e:
        logging.warning(f"Failed to edit message for main menu back: {e}")
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_markup())
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_search')
async def handle_menu_search(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())
    except Exception as e:
        logging.error(f"Error in handle_menu_search: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_library')
async def handle_menu_library(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        library_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="library_my_playlists")],
            [types.InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏", callback_data="library_liked_tracks")],
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç",
                                        callback_data="create_playlist_interactive_start")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
        ])
        await callback_query.message.edit_text("–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:", reply_markup=library_markup)
    except Exception as e:
        logging.error(f"Error in handle_menu_library: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_add')
async def handle_menu_add(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        add_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="add_menu_track_cmd")],
            [types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
                                        callback_data="create_playlist_interactive_start")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
        ])
        await callback_query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=add_markup)
    except Exception as e:
        logging.error(f"Error in handle_menu_add: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_account')
async def handle_menu_account(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        username_db = user_auth_data.get('username_db', 'N/A')
        account_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ", callback_data="account_info_opt")],
            [types.InlineKeyboardButton(text="–í—ã–π—Ç–∏", callback_data="account_logout_opt")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_back")]
        ])
        await callback_query.message.edit_text(f"–ê–∫–∫–∞—É–Ω—Ç: {username_db}", reply_markup=account_markup)
    except Exception as e:
        logging.error(f"Error in handle_menu_account: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'main_menu_recommendations')
async def handle_menu_recommendations(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=get_recommendations_menu_markup())
    except Exception as e:
        logging.error(f"Error in handle_menu_recommendations: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


# --- –ü–æ–∏—Å–∫: –ü–æ–¥–º–µ–Ω—é ---
@dp.callback_query(lambda c: c.data == 'search_tracks_opt')
async def handle_search_tracks_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(SearchStates.waiting_for_track_query)
    except Exception as e:
        logging.error(f"Error in handle_search_tracks_opt: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()

# --- –ü–æ–∏—Å–∫: –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ ---
@dp.message(SearchStates.waiting_for_track_query)
async def process_track_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return

    query = message.text
    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute(
            """SELECT t.id, t.name, al.title as album_name, au.name as author_name, al.author_id
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE t.name ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        tracks = cursor.fetchall()
        if tracks:
            await message.answer("üé∂ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:")
            for tid, name, album_name, author_name, author_id_val in tracks:
                track_text = f"ID: {tid}. {name}\n(–ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'})"

                cursor.execute("""
                               SELECT EXISTS (SELECT 1
                                              FROM user_reaction ur_check
                                                       JOIN reactions r_check ON ur_check.reaction_id = r_check.id
                                              WHERE ur_check.user_id = %s
                                                AND ur_check.track_id = %s
                                                AND r_check.type = 'like')
                               """, (user_id_db, tid))
                is_liked = cursor.fetchone()[0]

                buttons = []
                if is_liked:
                    buttons.append(types.InlineKeyboardButton(text="üëé Dislike", callback_data=f"unlike_track_{tid}"))
                else:
                    buttons.append(types.InlineKeyboardButton(text="üëç Like", callback_data=f"like_track_{tid}"))

                if author_id_val:
                    buttons.append(
                        types.InlineKeyboardButton(text="üë§ –ê–≤—Ç–æ—Ä", callback_data=f"view_author_{author_id_val}"))

                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(track_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –¢—Ä–µ–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except psycopg2.Error as db_err:
        logging.error(f"Database error in process_track_search_query: {db_err}")
        await send_error_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in process_track_search_query: {e}")
        await send_error_message(message)
    finally:
        await state.set_state(None)
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_albums_opt')
async def handle_search_albums_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(SearchStates.waiting_for_album_query)
    except Exception as e:
        logging.error(f"Error in handle_search_albums_opt: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()

# --- –ü–æ–∏—Å–∫: –ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–æ–≤ ---
@dp.message(SearchStates.waiting_for_album_query)
async def process_album_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return
    query = message.text
    try:
        cursor.execute(
            """SELECT al.id, al.title, au.name as author_name, g.name as genre_name, al.author_id
               FROM album al
                        LEFT JOIN author au ON al.author_id = au.id
                        LEFT JOIN genre g ON al.genre_id = g.id
               WHERE al.title ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        albums = cursor.fetchall()
        if albums:
            await message.answer("üíø –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã:")
            for aid, title, author_name, genre_name, author_id_val in albums:
                album_text = f"ID: {aid}. {title}\n(–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author_name if author_name else 'N/A'}, –ñ–∞–Ω—Ä: {genre_name if genre_name else 'N/A'})"
                buttons = []
                if author_id_val:
                    buttons.append(
                        types.InlineKeyboardButton(text="üë§ –ö –∞–≤—Ç–æ—Ä—É", callback_data=f"view_author_{author_id_val}"))
                buttons.append(
                    types.InlineKeyboardButton(text="üéº –¢—Ä–µ–∫–∏", callback_data=f"list_tracks_for_album_{aid}"))
                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(album_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –ê–ª—å–±–æ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except psycopg2.Error as db_err:
        logging.error(f"Database error in process_album_search_query: {db_err}")
        await send_error_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å–±–æ–º–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in process_album_search_query: {e}")
        await send_error_message(message)
    finally:
        await state.set_state(None)
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


@dp.callback_query(lambda c: c.data == 'search_artists_opt')
async def handle_search_artists_opt(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(SearchStates.waiting_for_artist_query)
    except Exception as e:
        logging.error(f"Error in handle_search_artists_opt: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.message(SearchStates.waiting_for_artist_query)
async def process_artist_search_query(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.set_state(None)
        return
    query = message.text
    try:
        cursor.execute(
            """SELECT id, name, auditions, bio
               FROM author
               WHERE name ILIKE %s
                   LIMIT 5""",
            (f'%{query}%',)
        )
        artists = cursor.fetchall()
        if artists:
            await message.answer("üé§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:")
            for aid, name, auditions, bio in artists:
                artist_text = f"ID: {aid}. {name}\n–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions else 0}\nBIO: {bio if bio else 'N/A'}"
                buttons = [
                    types.InlineKeyboardButton(text="üõçÔ∏è –ú–µ—Ä—á", callback_data=f"view_merch_{aid}"),
                    types.InlineKeyboardButton(text="üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data=f"view_concerts_{aid}")
                ]
                markup = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
                await message.answer(artist_text, reply_markup=markup)
        else:
            await message.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except psycopg2.Error as db_err:
        logging.error(f"Database error in process_artist_search_query: {db_err}")
        await send_error_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in process_artist_search_query: {e}")
        await send_error_message(message)
    finally:
        await state.set_state(None)
        await message.answer("–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_menu_markup())


# --- –¢—Ä–µ–∫: –õ–∞–π–∫ ---
@dp.callback_query(lambda c: c.data.startswith('like_track_'))
async def handle_like_track(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    user_id_db = user_auth_data.get('user_id_db')
    track_id = int(callback_query.data.split('_')[-1])

    try:
        cursor.execute("SELECT id FROM reactions WHERE type = 'like'")
        reaction_like_row = cursor.fetchone()
        if not reaction_like_row:
            await callback_query.answer("‚ùå –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ 'like' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
            return
        reaction_like_id = reaction_like_row[0]

        cursor.execute("SELECT id FROM track WHERE id = %s", (track_id,))
        if not cursor.fetchone():
            await callback_query.answer(f"–¢—Ä–µ–∫ ID {track_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        cursor.execute(
            "INSERT INTO user_reaction (user_id, reaction_id, track_id) VALUES (%s, %s, %s)",
            (user_id_db, reaction_like_id, track_id)
        )
        conn.commit()
        await callback_query.answer(f"–¢—Ä–µ–∫ ID {track_id} –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!", show_alert=False)

    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await callback_query.answer("–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫.", show_alert=True)
    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"Database error liking track {track_id} for user {user_id_db}: {db_err}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–∞–π–∫–Ω—É—Ç—å.", show_alert=True)
    except Exception as e:
        conn.rollback()
        logging.error(f"Unexpected error liking track {track_id} for user {user_id_db}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


# --- –¢—Ä–µ–∫: –î–∏–∑–ª–∞–π–∫ ---
@dp.callback_query(lambda c: c.data.startswith('unlike_track_'))
async def handle_unlike_track(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    user_id_db = user_auth_data.get('user_id_db')
    track_id = int(callback_query.data.split('_')[-1])

    try:
        cursor.execute("SELECT id FROM reactions WHERE type = 'like'")
        reaction_like_row = cursor.fetchone()
        if not reaction_like_row:
            await callback_query.answer("‚ùå –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ 'like' –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        reaction_like_id = reaction_like_row[0]

        cursor.execute(
            "SELECT id FROM user_reaction WHERE user_id = %s AND reaction_id = %s AND track_id = %s",
            (user_id_db, reaction_like_id, track_id)
        )
        if not cursor.fetchone():
            await callback_query.answer("–í—ã –µ—â–µ –Ω–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫, –∏–ª–∏ –æ–Ω —É–∂–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è.", show_alert=True)
            return

        cursor.execute(
            "DELETE FROM user_reaction WHERE user_id = %s AND reaction_id = %s AND track_id = %s",
            (user_id_db, reaction_like_id, track_id)
        )
        conn.commit()
        if cursor.rowcount > 0:
            await callback_query.answer(f"–¢—Ä–µ–∫ ID {track_id} –±–æ–ª—å—à–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.", show_alert=False)
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –ª–∞–π–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–±—Ä–∞–Ω.", show_alert=True)

    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"Database error unliking track {track_id} for user {user_id_db}: {db_err}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–±—Ä–∞—Ç—å –ª–∞–π–∫.", show_alert=True)
    except Exception as e:
        conn.rollback()
        logging.error(f"Unexpected error unliking track {track_id} for user {user_id_db}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–±—Ä–∞—Ç—å –ª–∞–π–∫.", show_alert=True)

# --- –ê–≤—Ç–æ—Ä ---
@dp.callback_query(lambda c: c.data.startswith('view_author_'))
async def handle_view_author(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        author_id = int(callback_query.data.split('_')[-1])
        cursor.execute("SELECT id, name, auditions, bio FROM author WHERE id = %s", (author_id,))
        author_data = cursor.fetchone()

        if author_data:
            aid, name, auditions, bio = author_data
            text = f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\nID: {aid}\n–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions else 0}\nBIO: {bio if bio else 'N/A'}"
            author_actions_markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üõçÔ∏è –ú–µ—Ä—á", callback_data=f"view_merch_{aid}"),
                    types.InlineKeyboardButton(text="üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data=f"view_concerts_{aid}")
                ],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫", callback_data="main_menu_search")]
            ])
            await callback_query.message.answer(text, reply_markup=author_actions_markup)
            await callback_query.answer()
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback_query.answer()
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_view_author: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Error in handle_view_author: {e}")
        await send_error_message(callback_query, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ.")
        await callback_query.answer()

# --- –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –∞–ª—å–±–æ–º–µ ---
@dp.callback_query(lambda c: c.data.startswith('list_tracks_for_album_'))
async def handle_list_tracks_for_album(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        album_id = int(callback_query.data.split('_')[-1])
        cursor.execute("SELECT title FROM album WHERE id = %s", (album_id,))
        album_title_row = cursor.fetchone()
        if not album_title_row:
            await callback_query.message.answer("–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer()
            return
        album_title = album_title_row[0]

        cursor.execute(
            """SELECT t.id, t.name, au.name as author_name
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE t.album_id = %s""", (album_id,))
        tracks = cursor.fetchall()
        if tracks:
            response_text = f"üé∂ –¢—Ä–µ–∫–∏ –≤ –∞–ª—å–±–æ–º–µ '{album_title}':\n"
            for tid, name, author_name_track in tracks:
                response_text += f"\n- {name} (–ò—Å–ø: {author_name_track if author_name_track else 'N/A'}, ID: {tid})"
        else:
            response_text = f"–í –∞–ª—å–±–æ–º–µ '{album_title}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(response_text)
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_list_tracks_for_album: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞.")
    except Exception as e:
        logging.error(f"Error in handle_list_tracks_for_album: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()

# --- –ú–µ—Ä—á ---
@dp.callback_query(lambda c: c.data.startswith('view_merch_'))
async def handle_view_merch(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        author_id = int(callback_query.data.split('_')[-1])
        cursor.execute("SELECT name FROM author WHERE id = %s", (author_id,))
        author_name_row = cursor.fetchone()
        author_name = author_name_row[0] if author_name_row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"

        cursor.execute("SELECT name, price, amount FROM merch WHERE author_id = %s ORDER BY name", (author_id,))
        merch_items = cursor.fetchall()
        if merch_items:
            response_text = f"üõçÔ∏è –ú–µ—Ä—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {author_name}:\n"
            for name, price, amount in merch_items:
                response_text += f"\n- {name}\n  –¶–µ–Ω–∞: {price} —Ä—É–±., –í –Ω–∞–ª–∏—á–∏–∏: {amount if amount > 0 else '–ù–µ—Ç'}"
        else:
            response_text = f"–£ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {author_name} –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä—á–∞."
        await callback_query.message.answer(response_text)
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_view_merch: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä—á–∞ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Error in handle_view_merch: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()

# --- –ö–æ–Ω—Ü–µ—Ä—Ç—ã ---
@dp.callback_query(lambda c: c.data.startswith('view_concerts_'))
async def handle_view_concerts(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        author_id = int(callback_query.data.split('_')[-1])
        cursor.execute("SELECT name FROM author WHERE id = %s", (author_id,))
        author_name_row = cursor.fetchone()
        author_name = author_name_row[0] if author_name_row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"

        cursor.execute("SELECT price_of_ticket, \"date\", place FROM concerts WHERE author_id = %s ORDER BY \"date\"",
                       (author_id,))
        concert_items = cursor.fetchall()
        if concert_items:
            response_text = f"üé§ –ö–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {author_name}:\n"
            for price, date_val, place in concert_items:
                formatted_date = date_val.strftime("%d %B %Y, %H:%M") if date_val else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                response_text += f"\n- –ú–µ—Å—Ç–æ: {place}\n  –î–∞—Ç–∞: {formatted_date}\n  –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {price} —Ä—É–±."
        else:
            response_text = f"–£ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {author_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤."
        await callback_query.message.answer(response_text)
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_view_concerts: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Error in handle_view_concerts: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã ---
@dp.callback_query(lambda c: c.data == 'library_my_playlists')
async def handle_library_my_playlists(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        await list_my_playlists(callback_query.message, state, is_callback=True)
    except Exception as e:
        logging.error(f"Error in handle_library_my_playlists: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'library_liked_tracks')
async def handle_library_liked_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("""
                       SELECT t.id, t.name, al.title as album_name, au.name as author_name
                       FROM track t
                                JOIN user_reaction ur ON t.id = ur.track_id
                                JOIN reactions r ON ur.reaction_id = r.id
                                LEFT JOIN album al ON t.album_id = al.id
                                LEFT JOIN author au ON al.author_id = au.id
                       WHERE ur.user_id = %s
                         AND r.type = 'like'
                         AND ur.track_id IS NOT NULL
                       ORDER BY t.name LIMIT 20
                       """, (user_id_db,))
        tracks = cursor.fetchall()
        if tracks:
            await callback_query.message.answer("üëç –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ (–¥–æ 20):")
            for tid, name, album, author in tracks:
                track_text = f"ID: {tid}. {name} (–ê–ª—å–±–æ–º: {album if album else 'N/A'}, –ò—Å–ø: {author if author else 'N/A'})"
                markup = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üëé Dislike", callback_data=f"unlike_track_{tid}")]
                ])
                await callback_query.message.answer(track_text, reply_markup=markup)
        else:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤.")
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_library_liked_tracks: {db_err}")
        await send_error_message(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in handle_library_liked_tracks: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


# --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –¢–û–ü-10 —Ç—Ä–µ–∫–æ–≤ ---
@dp.callback_query(lambda c: c.data == 'recomm_top_10_tracks')
async def handle_recomm_top_10_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    try:
        cursor.execute(
            """SELECT t.id, t.name, t.auditions, al.title as album_name, au.name as author_name
               FROM track t
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               ORDER BY t.auditions DESC NULLS LAST LIMIT 10"""
        )
        tracks = cursor.fetchall()
        if tracks:
            response_text = "üèÜ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –ø–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è–º:\n\n"
            for tid, name, auditions, album_name, author_name in tracks:
                response_text += (
                    f"üéµ {name} (ID: {tid})\n"
                    f"   –ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'}\n"
                    f"   –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions is not None else 0}\n\n"
                )
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(response_text)
    except psycopg2.Error as db_err:
        logging.error(f"DB error in handle_recomm_top_10_tracks: {db_err}")
        await send_error_message(callback_query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in handle_recomm_top_10_tracks: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'recomm_user_tags')
async def handle_recomm_user_tags(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    user_id_db = user_auth_data.get('user_id_db')
    try:
        # –ü–æ–ª—É—á–∏–º —Ç–µ–≥–∏ –∏–∑ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            """SELECT DISTINCT tt.tag_id
               FROM user_reaction ur
                        JOIN reactions react ON ur.reaction_id = react.id
                        JOIN track t ON ur.track_id = t.id
                        JOIN track_tags tt ON t.id = tt.track_id -- UPDATED to track_tags
               WHERE ur.user_id = %s
                 AND react.type = 'like'
                 AND ur.track_id IS NOT NULL""",
            (user_id_db,)
        )
        liked_tags_rows = cursor.fetchall()
        if not liked_tags_rows:
            await callback_query.message.answer(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ª–∞–π–∫–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤!")
            await callback_query.answer()
            return

        liked_tag_ids = [row[0] for row in liked_tags_rows]

        # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–∞—Ö
        cursor.execute(
            """SELECT t.id,
                      t.name,
                      COUNT(DISTINCT tt.tag_id) as matching_tags,
                      t.auditions,
                      al.title                  as album_name,
                      au.name                   as author_name
               FROM track t
                        JOIN track_tags tt ON t.id = tt.track_id -- UPDATED to track_tags
                        LEFT JOIN album al ON t.album_id = al.id
                        LEFT JOIN author au ON al.author_id = au.id
               WHERE tt.tag_id = ANY (%s)
                 AND t.id NOT IN (SELECT ur_liked.track_id
                                  FROM user_reaction ur_liked
                                           JOIN reactions react_liked ON ur_liked.reaction_id = react_liked.id
                                  WHERE ur_liked.user_id = %s
                                    AND react_liked.type = 'like'
                                    AND ur_liked.track_id IS NOT NULL)
               GROUP BY t.id, t.name, t.auditions, al.title, au.name
               ORDER BY matching_tags DESC, t.auditions DESC NULLS LAST LIMIT 5""",
            (liked_tag_ids, user_id_db)
        )
        recommended_tracks = cursor.fetchall()

        if recommended_tracks:
            response_text = "üéß –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–ø–æ —Ç–µ–≥–∞–º):\n\n"
            for tid, name, matching_tags, auditions, album_name, author_name in recommended_tracks:
                response_text += (
                    f"üéµ {name} (ID: {tid})\n"
                    f"   –ê–ª—å–±–æ–º: {album_name if album_name else 'N/A'}, –ò—Å–ø: {author_name if author_name else 'N/A'}\n"
                    f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤: {matching_tags}, –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {auditions if auditions is not None else 0}\n\n"
                )
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤."
        await callback_query.message.answer(response_text)
    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"Database error in handle_recomm_user_tags for user {user_id_db}: {db_err}")
        await send_error_message(callback_query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in handle_recomm_user_tags for user {user_id_db}: {e}")
        await send_error_message(callback_query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    finally:
        await callback_query.answer()


# --- –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã ---
@dp.message(Command("my_playlists"))
async def list_my_playlists(message: types.Message, state: FSMContext, is_callback: bool = False):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data: return

    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("SELECT id, title FROM playlist WHERE user_id = %s ORDER BY title", (user_id_db,))
        playlists = cursor.fetchall()

        target_message_object = message
        if is_callback:
            target_message_object = message

        if playlists:
            await target_message_object.answer("üìú –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:")
            for pid, title in playlists:
                markup = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üéµ –¢—Ä–µ–∫–∏", callback_data=f"view_playlist_tracks_{pid}"),
                        types.InlineKeyboardButton(text="üè∑Ô∏è –¢–µ–≥–∏", callback_data=f"view_playlist_tags_{pid}")
                    ],
                    [
                        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ —Å—é–¥–∞",
                                                   callback_data=f"add_track_to_this_playlist_start_{pid}")
                    ]
                ])
                await target_message_object.answer(f"‚ñ∂Ô∏è {title} (ID: {pid})", reply_markup=markup)
        else:
            await target_message_object.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å' –∏–ª–∏ '–ú–æ—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'.")
    except psycopg2.Error as db_err:
        logging.error(f"DB error in list_my_playlists for user {user_id_db}: {db_err}")
        event_obj = message if not is_callback else types.CallbackQuery(message=message, from_user=message.chat,
                                                                        id="temp_cq_id")  # Create a mock CQ for send_error_message if needed
        await send_error_message(event_obj, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in list_my_playlists for user {user_id_db}: {e}")
        event_obj = message if not is_callback else types.CallbackQuery(message=message, from_user=message.chat,
                                                                        id="temp_cq_id")
        await send_error_message(event_obj)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ ---
@dp.callback_query(lambda c: c.data.startswith('view_playlist_tracks_'))
async def handle_view_playlist_tracks(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    playlist_id = int(callback_query.data.split('_')[-1])
    try:
        cursor.execute("SELECT title FROM playlist WHERE id = %s",
                       (playlist_id,))
        playlist_info = cursor.fetchone()
        if not playlist_info:
            await callback_query.message.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer()
            return

        playlist_title = playlist_info[0]

        cursor.execute(
            """SELECT t.id, t.name
               FROM track t
                        JOIN playlist_tracklist ptl ON t.id = ptl.track_id
               WHERE ptl.playlist_id = %s
               ORDER BY t.name""", (playlist_id,)
        )
        tracks = cursor.fetchall()

        if tracks:
            await callback_query.message.answer(f"üé∂ –¢—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ '{playlist_title}':")
            for track_id, track_name in tracks:
                buttons = [[types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
                                                       callback_data=f"remove_track_from_playlist_{playlist_id}_{track_id}")]]
                markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback_query.message.answer(f"- {track_name} (ID: {track_id})", reply_markup=markup)
        else:
            await callback_query.message.answer(f"üé∂ –¢—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ '{playlist_title}':\n\n–ü–ª–µ–π–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")

        back_button = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–æ–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–∞–º", callback_data="library_my_playlists")]
        ])
        await callback_query.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", reply_markup=back_button)

    except psycopg2.Error as db_err:
        logging.error(f"DB error viewing tracks for playlist {playlist_id}: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
    except Exception as e:
        logging.error(f"Error viewing tracks for playlist {playlist_id}: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith('view_playlist_tags_'))
async def handle_view_playlist_tags(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return
    playlist_id = int(callback_query.data.split('_')[-1])
    try:
        cursor.execute("SELECT title FROM playlist WHERE id = %s", (playlist_id,))
        playlist_title_row = cursor.fetchone()
        if not playlist_title_row:
            await callback_query.message.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer()
            return
        playlist_title = playlist_title_row[0]

        cursor.execute(
            """SELECT tg.name
               FROM tag tg
                        JOIN playlist_tags pt ON tg.id = pt.tag_id
               WHERE pt.playlist_id = %s""", (playlist_id,))
        tags = cursor.fetchall()
        response_text = f"üè∑Ô∏è –¢–µ–≥–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_title}':\n"
        if tags:
            response_text += "\n".join([f"- {tag[0]}" for tag in tags])
        else:
            response_text += "–£ —ç—Ç–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤."

        back_button = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–æ–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–∞–º", callback_data="library_my_playlists")]
        ])
        await callback_query.message.answer(response_text, reply_markup=back_button)

    except psycopg2.Error as db_err:
        logging.error(f"DB error viewing tags for playlist {playlist_id}: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
    except Exception as e:
        logging.error(f"Error viewing tags for playlist {playlist_id}: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith('add_track_to_this_playlist_start_'))
async def handle_add_track_to_this_playlist_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    playlist_id = int(callback_query.data.split('_')[-1])
    user_id_db = user_auth_data.get('user_id_db')
    try:
        cursor.execute("SELECT title FROM playlist WHERE id = %s AND user_id = %s", (playlist_id, user_id_db))
        playlist_data = cursor.fetchone()
        if not playlist_data:
            await callback_query.message.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            await callback_query.answer()
            return

        playlist_title = playlist_data[0]
        await state.update_data(playlist_id_to_add_to=playlist_id, playlist_title_to_add_to=playlist_title)
        await callback_query.message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_title}'.\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞:")
        await state.set_state(PlaylistManagementStates.waiting_for_track_to_add_to_existing_playlist)

    except psycopg2.Error as db_err:
        logging.error(f"DB error starting to add track to playlist {playlist_id}: {db_err}")
        await send_error_message(callback_query, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–∫–∞.")
    except Exception as e:
        logging.error(f"Error starting to add track to playlist {playlist_id}: {e}")
        await send_error_message(callback_query)
    finally:
        await callback_query.answer()


@dp.message(PlaylistManagementStates.waiting_for_track_to_add_to_existing_playlist)
async def process_add_track_to_existing_playlist_input(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.clear()
        return

    fsm_data = await state.get_data()
    playlist_id = fsm_data.get('playlist_id_to_add_to')
    playlist_title = fsm_data.get('playlist_title_to_add_to', '—ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç')

    if not playlist_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    track_input = message.text.strip()
    found_track_id = None
    found_track_name = None
    try:
        if track_input.isdigit():
            track_id_candidate = int(track_input)
            cursor.execute("SELECT id, name FROM track WHERE id = %s", (track_id_candidate,))
            track_record = cursor.fetchone()
            if track_record:
                found_track_id, found_track_name = track_record
            else:
                await message.reply(f"–¢—Ä–µ–∫ —Å ID {track_id_candidate} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return
        else:
            cursor.execute("SELECT id, name FROM track WHERE name ILIKE %s", (f'%{track_input}%',))
            tracks_found = cursor.fetchall()
            if not tracks_found:
                await message.reply(
                    f"–¢—Ä–µ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø–æ—Ö–æ–∂–∏–º –Ω–∞ '{track_input}', –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID.")
                return
            if len(tracks_found) == 1:
                found_track_id, found_track_name = tracks_found[0]
            else:
                response_text = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ ID (–∏–ª–∏ /done_adding_to_playlist –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):\n"
                for tid, tname in tracks_found[:5]:
                    response_text += f"ID: {tid} - {tname}\n"
                await message.reply(
                    response_text + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

        if found_track_id and found_track_name:
            cursor.execute(
                "INSERT INTO playlist_tracklist (playlist_id, track_id) VALUES (%s, %s)",
                (playlist_id, found_track_id)
            )
            conn.commit()
            await message.reply(
                f"–¢—Ä–µ–∫ '{found_track_name}' (ID: {found_track_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_title}'.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫, –∏–ª–∏ /done_adding_to_playlist –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        await message.reply(f"–¢—Ä–µ–∫ '{found_track_name}' —É–∂–µ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ '{playlist_title}'. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"DB error adding track to existing playlist {playlist_id}: {db_err}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        conn.rollback()
        logging.error(f"Error adding track to existing playlist {playlist_id}: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.")


@dp.message(Command("done_adding_to_playlist"), PlaylistManagementStates.waiting_for_track_to_add_to_existing_playlist)
async def process_done_adding_to_existing_playlist(message: types.Message, state: FSMContext):
    user_auth_data = await ensure_authenticated(message, state)
    if not user_auth_data:
        await state.clear()
        return
    fsm_data = await state.get_data()
    playlist_title = fsm_data.get('playlist_title_to_add_to', '–ø–ª–µ–π–ª–∏—Å—Ç')
    await message.answer(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ '{playlist_title}'.")
    await state.clear()
    await message.answer("–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:", reply_markup=(await get_library_menu_markup(state)))


@dp.callback_query(lambda c: c.data.startswith('remove_track_from_playlist_'))
async def handle_remove_track_from_playlist(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data: return

    parts = callback_query.data.split('_')
    playlist_id = int(parts[-2])
    track_id = int(parts[-1])
    user_id_db = user_auth_data.get('user_id_db')

    try:
        cursor.execute("SELECT user_id FROM playlist WHERE id = %s", (playlist_id,))
        owner_id_row = cursor.fetchone()
        if not owner_id_row or owner_id_row[0] != user_id_db:
            await callback_query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç.", show_alert=True)
            return

        cursor.execute(
            "DELETE FROM playlist_tracklist WHERE playlist_id = %s AND track_id = %s",
            (playlist_id, track_id)
        )
        conn.commit()
        if cursor.rowcount > 0:
            await callback_query.answer(f"–¢—Ä–µ–∫ (ID: {track_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.", show_alert=False)
            await callback_query.message.delete()
        else:
            await callback_query.answer("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)

    except psycopg2.Error as db_err:
        conn.rollback()
        logging.error(f"DB error removing track {track_id} from playlist {playlist_id}: {db_err}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)
    except Exception as e:
        conn.rollback()
        logging.error(f"Error removing track {track_id} from playlist {playlist_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)


# --- Helper to get library menu (used after some playlist operations) ---
async def get_library_menu_markup(state: FSMContext):
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="library_my_playlists")],
        [types.InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏", callback_data="library_liked_tracks")],
        [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç",
                                    callback_data="create_playlist_interactive_start")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_back")]
    ])


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ê–∫–∫–∞—É–Ω—Ç–∞ ---
@dp.callback_query(lambda c: c.data == 'account_info_opt')
async def handle_account_info(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data:
        return

    user_id_db = user_auth_data.get('user_id_db')
    username_db = user_auth_data.get('username_db', 'N/A')

    try:
        cursor.execute("SELECT mail FROM \"user\" WHERE id = %s", (user_id_db,))
        user_db_details = cursor.fetchone()

        email = user_db_details[0] if user_db_details and user_db_details[0] else "–ù–µ —É–∫–∞–∑–∞–Ω"

        info_text = (f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
                     f"üîπ ID: {user_id_db}\n"
                     f"üîπ Username: {username_db}\n"
                     f"üîπ Email: {email}\n"
                     )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ –º–µ–Ω—é
        await callback_query.message.answer(info_text)
        await callback_query.answer()

    except psycopg2.Error as db_err:
        logging.error(f"Database error in handle_account_info for user {user_id_db}: {db_err}")
        await send_error_message(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logging.error(f"Unexpected error in handle_account_info for user {user_id_db}: {e}")
        await send_error_message(callback_query)


@dp.callback_query(lambda c: c.data == 'account_logout_opt')
async def handle_account_logout(callback_query: types.CallbackQuery, state: FSMContext):
    user_auth_data = await ensure_authenticated(callback_query, state)
    if not user_auth_data:
        await callback_query.message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞.")
        await callback_query.answer()
        return

    try:
        username_db = user_auth_data.get('username_db', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        await state.clear()

        await callback_query.message.edit_text(f"‚úÖ {username_db}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–í—Ö–æ–¥)", callback_data="auth_login_start")],
            [types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register_start")]
        ])
        await callback_query.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=markup
        )
        await callback_query.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"Unexpected error in handle_account_logout: {e}")
        await state.clear()  # Try to clear state even on error
        await send_error_message(callback_query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        # await callback_query.answer() # Redundant if send_error_message answers


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    if not conn or not cursor:
        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    logging.info("Starting bot polling...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"Bot polling failed critically: {e}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
        logging.info("Database connection closed.")


if __name__ == '__main__':
    asyncio.run(main())